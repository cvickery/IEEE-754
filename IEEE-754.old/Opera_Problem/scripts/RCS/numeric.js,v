head	1.1;
access;
symbols;
locks
	vickery:1.1; strict;
comment	@# @;


1.1
date	2010.03.31.22.41.22;	author vickery;	state Exp;
branches;
next	;


desc
@Manage decimal (integer, real, rational) and hexadecimal
(IEEE-754 single and double precision) strings.
@


1.1
log
@Initial revision
@
text
@// $Id$

/*  Utiities for manipulating numeric strings.
 *  Routines for working with decimal (integer, real, rational), and hexadecimal
 *  (IEEE-754 single and double precision) strings.
 *
 *  $Log$
 *  Revision 1.1  2010/03/27 05:00:14  vickery
 *  Initial revision
 *
 */

//  The Numeric Library constructor
//  ============================================================================
/*  Public functions are add(), subtract(), multiply(), and divide().
 *  Internal functions are prepArgs() and compare().
 *  compare() returns -1, 0, or +1
 *  add(), subtract(), and multiply() return numeric strings.
 *  divide() returns an object that will print a numeric string, but the
 *  integer, fraction, and decimal_recurrence_start values can be accessed.
 */
function Numeric()
{
  var DECIMAL_PRECISION = 512;
  var BINARY_PRECISION  = 128;
  var BINARY_DIGITS_PER_DECIMAL_DIGIT = Math.log(10) / Math.log(2);

  //  setDecimalPrecision()
  //  -------------------------------------------------------------------------
  function setDecimalPrecision(newPrecision)
  {
    var oldPrecision = DECIMAL_PRECISION;
    DECIMAL_PRECISION = newPrecision;
    return oldPrecision;
  }

  //  setBinaryPrecision()
  //  -------------------------------------------------------------------------
  function setBinaryPrecision(newPrecision)
  {
    var oldPrecision = BINARY_PRECISION;
    BINARY_PRECISION = newPrecision;
    return oldPrecision;
  }

  //  numeric_value()
  //  =========================================================================
  var numeric_value = function(negative_flag, integer_part, fraction_part, recurrence_start, exponent, valid_flag)
  {
    this.isNegative                 = negative_flag;
    this.decimal_integer_part       = integer_part;
    this.decimal_fraction_part      = fraction_part;
    this.decimal_recurrence_start   = recurrence_start;
    this.decimal_exponent           = exponent;
    this.decimal_recurrence_string  = '';
    this.isValid                    = valid_flag;
    this.isDecimalNormalized        = false;
  };

  //  numeric_value.normalize()
  //  -------------------------------------------------------------------------
  /*  One digit to the left of the decimal point; no zeros to the right of
   *  the decimal point unless it's the start of the recurrence.
   */
  numeric_value.prototype.normalize = function()
  {
    if (this.isDecimalNormalized || !this.isValid)  return this;

    //  local working copies of object properties
    var decimal_recurrence_string = '';
    var decimal_recurrence_start  = this.decimal_recurrence_start;
    var decimal_integer_part      = ltrim(this.decimal_integer_part);
    var decimal_fraction_part     = this.decimal_fraction_part;
    var decimal_exponent          = this.decimal_exponent;
    if (decimal_integer_part.length > 1)
    {
      if (decimal_recurrence_start > -1)
      {
        decimal_recurrence_string = decimal_fraction_part.substr(decimal_recurrence_start);
      }
      while (decimal_integer_part.length > 1)
      {
        decimal_fraction_part =
          decimal_integer_part.charAt(decimal_integer_part.length - 1) + decimal_fraction_part;
        decimal_integer_part = decimal_integer_part.substr(0, decimal_integer_part.length - 1);
        decimal_exponent++;
      }
      if (decimal_recurrence_string.length > 0)
      {
        while (decimal_fraction_part.length >= (decimal_recurrence_string.length * 2))
        {
          decimal_fraction_part =
            decimal_fraction_part.substr(0, decimal_fraction_part.length = decimal_recurrence_string.length);
        }
        decimal_recurrence_start = decimal_fraction_part.length - decimal_recurrence_string.length;
      }
    }
    else if (decimal_integer_part === '0')
    {
      while (decimal_fraction_part.charAt(0) === '0')
      {
        if (decimal_recurrence_start === 0) break;
        if (decimal_recurrence_start > -1) decimal_recurrence_start--;
        decimal_fraction_part = decimal_fraction_part.substr(1);
        decimal_exponent--;
      }
    }
    this.decimal_integer_part       = decimal_integer_part;
    this.decimal_fraction_part      = decimal_fraction_part;
    this.decimal_recurrence_start   = decimal_recurrence_start;
    this.decimal_recurrence_string  = decimal_recurrence_string;
    this.decimal_exponent           = decimal_exponent;
    this.isDecimalNormalized        = true;
    return this;
  }

  //  numeric_value.toBinary()
  //  -------------------------------------------------------------------------
  /*  Convert a numeric_value object to a normalized binary string
   */
  numeric_value.prototype.toBinary = function()
  {
    //  Normalize the decimal value if necessary
    if (!this.isDecimalNormalized) this.normalize();

    var binary_integer    = '';
    var binary_fraction   = '';
    var binary_exponent   = '';
    var decimal_integer   = this.decimal_integer_part;
    var decimal_fraction  = this.decimal_fraction_part;
    var decimal_exponent  = this.decimal_exponent;

    //  Create 'pure' decimal number: shift to make decimal exponent zero
    while (decimal_exponent > 0)
    {
      // Shift left, filling in with recurrence digits or zeros if necessary
      if (decimal_fraction === '')
      {
        if (this.decimal_recurrence_string.length > 0) decimal_fraction = this.decimal_recurrence_string;
        else decimal_fraction = '0';
      }
      decimal_integer = decimal_integer.concat(decimal_fraction[0]);
      decimal_fraction = decimal_fraction.substr(1);
      decimal_exponent--;
    }
    while (decimal_exponent < 0)
    {
      //  Shift right, filling in with zeros if necessary
      if (decimal_integer.length === 0)
      {
        decimal_integer = '0';
      }
      decimal_fraction = decimal_integer[decimal_integer.length - 1].concat(decimal_fraction);
      decimal_integer = decimal_integer.substr(1);
      decimal_exponent++;
    }

    //  Integer Part
    for (var i = 0; i < BINARY_PRECISION; i++)
    {
      var division_result = divide(decimal_integer, '2');
      binary_integer = ((division_result.decimal_fraction_part === '5') ? '1' : '0').concat(binary_integer);
      decimal_integer = division_result.decimal_integer_part;
      if (decimal_integer === '0') break;
    }
    //  Fraction Part

    //  If there is a recurrence string, it has to be replicated an appropriate number of times to
    //  get the desired binary precision.
    if (this.decimal_recurrence_string.length > 0)
    {
      while (decimal_fraction_part.length < (BINARY_PRECISION / BINARY_DIGITS_PER_DECIMAL_DIGIT))
      {
        decimal_fraction_part = decimal_fraction_part.concat(decimal_recurrence_string);
      }
    }
    var fractions = [decimal_fraction];
    var binary_recurrence_start = -1;
    for (var i = 0; i < BINARY_PRECISION; i++)
    {
      if (decimal_fraction == 0) break;
      var multiplication_result = multiply(decimal_fraction, '2', false);
      binary_fraction = binary_fraction.concat(multiplication_result.charAt(0));
      decimal_fraction = multiplication_result.substr(1);

      //  Check for binary recurrence
      for (var i = 0; i < fractions.length; i++)
      {
        if (decimal_fraction === fractions[i])
        {
          binary_recurrence_start = i;
          break;
        }
      }
      if (binary_recurrence_start >= 0) break;
      fractions.push(decimal_fraction);
    }
    if (binary_recurrence_start >= 0)
    {
      binary_fraction = binary_fraction.substr(0, binary_recurrence_start) +
        '[' + binary_fraction.substr(binary_recurrence_start) + ']...';
    }
    return (this.isNegative ? '-' : '') +
      binary_integer +
      ((binary_fraction !== '') ? '.' + binary_fraction : '') +
      ((binary_exponent !== '') ? 'E' + binary_exponent : '');
  }

  //  numeric_value.toString()
  //  -------------------------------------------------------------------------
  numeric_value.prototype.toString = function(base)
  {
    if ((arguments.length === 1) && (base === 2)) return this.toBinary();
    if (!this.isValid) return 'Not a recognized number';
    if (this.decimal_integer_part === +Infinity) return '+Infinity';
    if (this.decimal_integer_part === -Infinity) return '-Infinity';
    if (isNaN(this.decimal_integer_part)) return 'NaN';

    var result = (this.isNegative ? '-' : '') + this.decimal_integer_part;
    if (this.decimal_fraction_part != '')
    {
      if (this.decimal_recurrence_start < 0)
      {
        return  result + '.' + this.decimal_fraction_part +
          ((this.decimal_exponent === '0') ? '' : ('E' + this.decimal_exponent));
      }
      else
      {
        return result + '.' + this.decimal_fraction_part.substr(0, this.decimal_recurrence_start) + '[' +
          this.decimal_fraction_part.substr(this.decimal_recurrence_start) + ']...' +
          ((this.decimal_exponent === '0') ? '' : ('E' + this.decimal_exponent));
      }
    }
    else
    {
      return result + ((this.decimal_exponent === '0') ? '' : ('E' + this.decimal_exponent));
    }
  }

//  prepArgs()
//  ---------------------------------------------------------------------------
/*  Convert strings of unsigned decimal digits into arrays of integers of
 *  equal length. Index positions correspond to positional power of 10.
 *  (That is, the digits are reversed).
 */
  function prepArgs()
  {
    if ( arguments[0] === '' || arguments[1] === '')
    {
      throw 'prepArgs: empty argument(s)';
    }
    var result = {sign1:'+', arg1:[], sign2:'+', arg2:[]};
    var arg1 = arguments[0];
    var arg2 = arguments[1];
    if (arg1[0] === '-' || arg1[0] === '+')
    {
      result.sign1 = arg1[0];
      arg1 = arg1.substr(1);
    }
    if (arg2[0] === '-' || arg2[0] === '+')
    {
      result.sign2 = arg2[0];
      arg2 = arg2.substr(1);
    }
    while (arg1.length < arg2.length) arg1 = '0'.concat(arg1);
    while (arg2.length < arg1.length) arg2 = '0'.concat(arg2);

    for (var i = 0; i < arg1.length; i++)
    {
      result.arg1.unshift(arg1.charAt(i) - 0);
      result.arg2.unshift(arg2.charAt(i) - 0);
    }

    return result;
  }

//  trim()
//  ---------------------------------------------------------------------------
/*  Remove leading and trailing whitespace from a string.
 */
  function trim(arg)
  {
    var result = /^\s*(\S)*\s*$/.exec(arg);
    if (result && result[1]) return result[1];
    return '';
  }

//  ltrim()
//  ---------------------------------------------------------------------------
/*    Remove leading zeros from a numeric string.
 */
  function ltrim(arg)
  {
    var result = arg;
    while ((result.length > 1) && result.charAt(0) === '0')
    {
      result = result.substr(1);
    }
    return result;
  }

//  rtrim()
//  ---------------------------------------------------------------------------
/*    Remove trailing zeros from a numeric string.
 */
  function rtrim(arg)
  {
    var result = arg;
    while ((result.length > 0) && result.charAt(result.length - 1) === '0')
    {
      result = result.substr(0, result.length - 1);
    }
    return result;
  }

//  compare()
//  ---------------------------------------------------------------------------
/*  Three-way compare the numeric values of two signed decimal strings.
 */
  function compare(arg1, arg2)
  {
    var a = arg1;
    var b = arg2;
    var sign_a = '+';
    var sign_b = '+';
    if (a[0] === '-' || a[0] ==- '+')
    {
      sign_a = a[0];
      a = a.substr(1);
    }
    if (b[0] === '-' || b[0] ==- '+')
    {
      sign_b = b[0];
      b = b.substr(1);
    }
    switch (sign_a + sign_b)
    {
      case '++':
        break;
      case '+-':
        return +1;
        break;
      case '-+':
        return -1;
        break;
      case '--':
        var t = a;
        var a = b;
        var b = t;
        break;
      default:
        throw 'compare: bad signs';
    }
    if (a.length > b.length) return +1;
    if (a.length < b.length) return -1;
    for (var i = 0;  i < a.length; i++)
    {
      if (a[i] > b[i]) return +1;
      if (a[i] < b[i]) return -1;
    }
    return 0;
  }
  this.compare = compare;

//  decimal_parse()
//  ---------------------------------------------------------------------------
/*  Parse a decimal string into a decimal_object. The input string may be
 *  signed. Values may be integers, fractional decimals, rationals, or mixed
 *  numbers. All values may use exponential notation, but rationals and mixed
 *  numbers may use only positive exponents.
 */
  function decimal_parse(inputString)
  {
    var isNegative            = false;
    var decimal_integer_part          = '';
    var decimal_fraction_part         = '';
    var decimal_exponent              = '0';

    var mixedRE = new RegExp(
        "^\\s*(([+\\-]?\\d+)([Ee](\\d+))?\\s+)?"  + // whole number
        "([+\\-]?\\d+)\\s*([Ee](\\d+))?\\s*"      + // numerator
        "\\/"                                     + // solidus for division slash
        "\\s*([+\\-]?\\d+)\\s*([Ee](\\d+))?\\s*$"); // denominator
    var mixed = mixedRE.exec(inputString);
    if (mixed)
    {
      var sign          = '+';
      var whole_number  = mixed[2];
      var numerator     = mixed[5];
      var denominator   = mixed[8];
      if (mixed[1])
      {
        if (whole_number[0] === '-' || whole_number === '+')
        {
          sign = whole_number[0];
          whole_number = whole_number.substr(1);
        }
        for (var i = 0; i < mixed[4]; i++)
        {
          whole_number = whole_number.concat('0');
        }
      }
      if (mixed[6])
      {
        for (var i = 0; i < mixed[7]; i++)
        {
          numerator = numerator.concat('0');
        }
      }
      if (mixed[9])
      {
        for (var i = 0; i < mixed[10]; i++)
        {
          denominator = denominator.concat('0');
        }
      }
      if (whole_number)
      {
         numerator = add(numerator, (multiply(whole_number, denominator, true)));
      }
      var value = divide(numerator, denominator);
      if (sign === '-') value.isNegative = !value.isNegative;
      return value.normalize();
    }

    //  Plain ol' number?
    var pon = /^\s*([+\-])?(\d+)?(\.(\d*))?([Ee]([+\-]?\d+))?\s*$/.exec(inputString);
    if (pon)
    {
      if (pon[1]) isNegative            = pon[1] === '-';
      if (pon[2]) decimal_integer_part  = pon[2];
      if (pon[4]) decimal_fraction_part = pon[4];
      if (pon[6]) decimal_exponent      = pon[6];
      if (decimal_integer_part.length + decimal_fraction_part.length > 0)
      {
        var value =
          new numeric_value(isNegative,
                            ltrim(decimal_integer_part),
                            rtrim(decimal_fraction_part),
                            -1,
                            decimal_exponent,
                            true);
        return value.normalize();
      }
    }
    return new numeric_value(false, NaN, '', -1, 0, false);
  }
  this.decimal_parse = decimal_parse;


//  add()
//  ---------------------------------------------------------------------------
/*  Add the augend and addend.
 */
  function add(arg1, arg2, trim)
  {
    var values = prepArgs(arg1, arg2);
    var augend = values.arg1;
    var addend = values.arg2;

    //  If signs of operands are different, it's subtraction.
    if (values.sign1 !== values.sign2)
    {
      if (arg1[0] === '-' || arg1[0] === '+') arg1 = arg1.substr(1);
      if (arg2[0] === '-' || arg2[0] === '+') arg2 = arg2.substr(1);
      var diff = '';
      if (compare(arg1, arg2) > 0)
      {
        diff = subtract(arg1, arg2, true);
        diff = values.sign1.concat(diff);
      }
      else
      {
        diff = subtract(arg2, arg1, true);
        diff = values.sign2.concat(diff);
      }
      return diff;
    }

    //  It's addition
    var sum = '';
    var carry = 0;
    for (var i = 0; i < augend.length; i++)
    {
      var digit_sum = augend[i] + addend[i] + carry;
      if (digit_sum > 9)
      {
        digit_sum -= 10;
        carry = 1;
      }
      else carry = 0;
      sum = String.fromCharCode(48 + digit_sum).concat(sum);
    }
    if (carry > 0) sum = '1'.concat(sum);
    if (trim)
    {
      sum = ltrim(sum);
    }
    return sum;
  }
  this.add = add;


//  subtract()
//  ---------------------------------------------------------------------------
/*  Subtract the unsigned minuend from the unsigned subtrahend. The subtrahend
 *  must be numerically larger than the minuend. Returns a string the length
 *  of the subtrahend with leading zeros.
 *  Use the trim argument to trim the leading zeros.
 */
  function subtract(arg1, arg2, trim)
  {
    var arrays = prepArgs(arg1, arg2);
    var subtrahend = arrays.arg1;
    var minuend = arrays.arg2;

    var diff = '';
    for (var i = 0; i < subtrahend.length; i++)
    {
      var digit_diff = subtrahend[i] - minuend[i];
      if (digit_diff < 0)
      {
        digit_diff += 10;
        for (var j = i+1; j<subtrahend.length; j++)
        {
          subtrahend[j] -= 1;
          if (subtrahend[j] > -1) break;
          subtrahend[j] = 9;
        }
      }
      diff = String.fromCharCode(48 + digit_diff).concat(diff);
    }
    if (trim) return ltrim(diff);
    return diff;
  };
  this.subtract = subtract;

//  multiply()
//  ---------------------------------------------------------------------------
/*  Multiplicand by multiplier; return the product.
 */
  function multiply(arg1, arg2, trim)
  {
    var multiplicand      = arg1;
    var multiplier        = arg2;
    var multiplicand_sign = '+';
    var multiplier_sign   = '+';

    //  Process signs of multiplicand and multiplier
    if (multiplicand[0] === '-' || multiplicand[0] === '+')
    {
      multiplicand_sign = multiplicand[0];
      multiplicand = multiplicand.substr(1);
    }
    if (multiplier[0] === '-' || multiplier[0] === '+')
    {
      multiplier_sign = multiplier[0];
      multiplier = multiplier.substr(1);
    }
    product_sign = (multiplier_sign === multiplicand_sign) ? '' : '-';

    var product = '0';
    for (var i = multiplier.length - 1; i >= 0; i--)
    {
      var multiplier_digit = multiplier.charAt(i) - '0';
      var partial_product = '';
      var carry = 0;
      for (var j = multiplicand.length - 1; j >= 0; j--)
      {
        var multiplicand_digit = multiplicand.charAt(j) - '0';
        var digit_product = (multiplier_digit * multiplicand_digit) + carry;
        carry = Math.floor(digit_product / 10);
        partial_product = String.fromCharCode((digit_product % 10) + 48).concat(partial_product);
      }
      for (var k = i; k < multiplier.length - 1; k++)
      {
        partial_product = partial_product.concat('0');
      }
      product = String.fromCharCode(carry + 48) + add(product, partial_product);
    }
    if (trim) product = ltrim(product);
    return product_sign.concat(product);
  };
  this.multiply = multiply;

//  divide()
//  ---------------------------------------------------------------------------
/*  Signed division of divisor by dividend, giving integer and fraction parts.
 *  The return object includes where the recurrence starts, if found.
 *    Algorithm (long division)
 *      Process optional sign characters of dividend and divisor.
 *      Check for division by zero.
 *      Calculate the integer part:
 *        If the divisor is larger than the dividend, the integer part is 0:
 *        the remainder is the dividend; the current position is zero; goto F.
 *        I: The remainder is the next n digits of the dividend, starting at the
 *        current position and continuing for the number of digits in the
 *        divisor. Count how many times you can sum the divisor without
 *        exceeding the remainder. Postpend that count to the integer part, and
 *        subtract the sum from the remainder to get the new remainder.
 *        Increment the current position. If there are enough digits left in the
 *        dividend, goto I.
 *      Calculate the fraction part:
 *        F: Count how many times you can sum the divisor without exceeding the
 *        dividend value in the next n digits of the dividend. Postpend that
 *        count to the fraction part, and subtract the sum from the remainder to
 *        get the new remainder.  If the remainder is zero, stop. If the
 *        remainder is on the remainder stack, note that position as the
 *        recurrence start, and stop. Otherwise, increment the current position and
 *        append the next digit of the dividend to the remainder, or zero if
 *        there is none.  If the fraction is shorter than DECIMAL_PRECISION, goto F.
 *      Return a numeric_value object with the sign, integer part, fraction
 *      part, and recurrence start position.
 */
  function divide(arg1, arg2)
  {
    var decimal_integer_part      =  '';
    var decimal_fraction_part     =  '';
    var remainder         =  '';
    var remainders        = [ ];
    var dividend_index    =   0;
    var digit_value       =   0;
    var decimal_recurrence_start  =  -1;
    var dividend_sign     = '+';
    var divisor_sign      = '+';
    var isNegative        = false;
    var dividend          = arg1;
    var divisor           = arg2;

    //  Process signs of dividend and divisor
    if (dividend[0] === '-' || dividend[0] === '+')
    {
      dividend_sign = dividend[0];
      dividend = dividend.substr(1);
    }
    if (divisor[0] === '-' || divisor[0] === '+')
    {
      divisor_sign = divisor[0];
      divisor = divisor.substr(1);
    }
    isNegative = !(divisor_sign === dividend_sign);

    //  Divide by zero?
    if (compare(divisor, '0') === 0)
    {
      if (isNegative)
      {
        // Say object's isNegative value is false because the value is -Infinity already.
        return new numeric_value(false, -Infinity, '', -1, '', true);
      }
      else
      {
        return new numeric_value(false, +Infinity, '', -1, '', true);
      }
    }

    //  Result less than 1?
    if (compare(dividend, divisor) < 0)
    {
      //  yes; divisor is larger than dividend
      decimal_integer_part = '0';
      remainder = dividend;
    }
    else
    {
      //  Integer Part
      remainder = dividend.substr(0, divisor.length);
      while ((dividend_index + divisor.length) <= dividend.length)
      {
        digit_value = 0;
        while (compare(remainder, divisor) >= 0)
        {
          digit_value++;
          remainder = subtract(remainder, divisor, true);
        }
        decimal_integer_part = decimal_integer_part.concat(String.fromCharCode(48 + digit_value));
        if (dividend_index + divisor.length < dividend.length)
        {
          remainder = ltrim(remainder.concat(dividend[dividend_index + divisor.length]));
        }
        dividend_index++;
      }
    }
    decimal_integer_part = ltrim(decimal_integer_part);

    //  Fraction Part
    remainders[0] = remainder;
    while (decimal_fraction_part.length < DECIMAL_PRECISION)
    {
      if (dividend_index + divisor.length < dividend.length)
      {
        remainder = remainder.concat(dividend[dividend_index + divisor.length]);
      }
      else
      {
        remainder = remainder.concat('0');
      }
      digit_value = 0;
      while (compare(remainder, divisor) >= 0)
      {
        digit_value++;
        remainder = subtract(remainder, divisor, true);
      }
      decimal_fraction_part = decimal_fraction_part.concat(String.fromCharCode(48 + digit_value));
      remainder = ltrim(remainder);
      if (remainder === '0') break;
      for (var i = 0; i < remainders.length; i++)
      {
        if (remainders[i] === remainder)
        {
          decimal_recurrence_start = i;
          break;
        }
      }
      if (decimal_recurrence_start > -1) break;
      remainders.push(remainder);
      dividend_index++;
    }

    return new numeric_value( isNegative,
                              decimal_integer_part,
                              decimal_fraction_part,
                              decimal_recurrence_start,
                              '0',
                              true);
  };
  this.divide = divide;
}
@
