head	1.1;
access;
symbols;
locks
	vickery:1.1; strict;
comment	@# @;


1.1
date	2010.03.27.05.00.14;	author vickery;	state Exp;
branches;
next	;


desc
@Library of functions for manipulating decimal strings of essentially unlimited length;
@


1.1
log
@Initial revision
@
text
@// $Id$
/*  Arithmetic on unsigned decimal strings.
 *  Designed to allow users to enter rational numbers with an unlimited number
 *  of digits in the numerator and denominator. Will implement multiplication
 *  when needed. Addition and subtraction work with and return unsigned
 *  integers.
 *    TODO  Construct decimal_value objects from decimal strings.
 *
 *  $Log$
 */

//  The Decimal Library constructor
//  ============================================================================
/*  Public functions are add(), subtract(), multiply(), and divide().
 *  Internal functions are prepArgs() and compare().
 *  compare() returns -1, 0, or +1
 *  add(), subtract(), and multiply() return numeric strings.
 *  divide() returns an object that will print a numeric string, but the
 *  integer, fraction, and recurrence_start values can be accessed.
 */
function Decimal()
{
  var PRECISION = 50;

  //  decimal_value()
  //  =========================================================================
  var decimal_value = function(i, f, s, r, e)
  {
    this.integer_part     = i;
    this.fraction_part    = f;
    this.isNegative       = s;
    this.recurrence_start = r;
    this.exponent         = e;
  };

  //  decimal_value.normalize()
  //  -------------------------------------------------------------------------
  /*  One digit to the left of the decimal point; no zeros to the right of
   *  the decimal point unless it's the start of the recurrence.
   */
  decimal_value.prototype.normalize = function()
  {
    var recurrence_string = '';
    var recurrence_start = this.recurrence_start;
    var integer_part = ltrim(this.integer_part);
    var fraction_part = this.fraction_part;
    if (integer_part.length > 1)
    {
      if (recurrence_start > -1)
      {
        recurrence_string = fraction_part.substr(recurrence_start);
      }
      while (integer_part.length > 1)
      {
        fraction_part =
          integer_part.charAt(integer_part.length - 1) + fraction_part;
        integer_part = integer_part.substr(0, integer_part.length - 1);
        this.exponent++;
      }
      if (recurrence_string.length > 0)
      {
        while (fraction_part.length >= (recurrence_string.length * 2))
        {
          fraction_part = fraction_part.substr(0, fraction_part.length = recurrence_string.length);
        }
        recurrence_start = fraction_part.length - recurrence_string.length;
      }
    }
    else
    {
      while (fraction_part.charAt(0) === '0')
      {
        if (recurrence_start === 0) break;
        if (recurrence_start > -1) recurrence_start--;
        fraction_part = fraction_part.substr(1);
        this.exponent--;
      }
    }
    this.integer_part     = integer_part;
    this.fraction_part    = fraction_part;
    this.recurrence_start = recurrence_start;
    return this;
  }
  //  decimal_value.toString()
  //  --------------------------
  decimal_value.prototype.toString = function()
  {
    var result = (this.isNegative ? '-' : '') + this.integer_part + '.';
    if (this.recurrence_start < 0)
    {
      return  result + this.fraction_part +
        ((this.exponent === 0) ? '' : ('E' + this.exponent));
    }
    else
    {
      return result + this.fraction_part.substr(0, this.recurrence_start) + '[' +
        this.fraction_part.substr(this.recurrence_start) + ']...' +
        ((this.exponent === 0) ? '' : ('E' + this.exponent));
    }
  }

//  prepArgs()
//  ---------------------------------------------------------------------------
/*  Convert strings of unsigned decimal digits into arrays of integers of
 *  equal length. Index positions correspond to positional power of 10.
 *  (That is, the digits are reversed).
 */
  function prepArgs(arg1, arg2)
  {
    while (arg1.length < arg2.length) arg1 = '0'.concat(arg1);
    while (arg2.length < arg1.length) arg2 = '0'.concat(arg2);
    var arrays = {arg1:[], arg2:[]};
    for (var i=0; i < arg1.length; i++)
    {
      arrays.arg1.unshift(arg1.charAt(i) - 0);
      arrays.arg2.unshift(arg2.charAt(i) - 0);
    }
    return arrays;
  }

//  ltrim()
//  ---------------------------------------------------------------------------
  function ltrim(arg)
  {
    var result = arg;
    while ((result.length > 1) && result.charAt(0) === '0')
    {
      result = result.substr(1);
    }
    return result;
  }

//  compare()
//  ---------------------------------------------------------------------------
/*  Three-way compare the numeric values of two unsigned decimal strings.
 */
  function compare(arg1, arg2)
  {
    var a = ltrim(arg1);
    var b = ltrim(arg2);
    if (a.length > b.length) return +1;
    if (a.length < b.length) return -1;
    for (var i = 0;  i < a.length; i++)
    {
      if (a[i] > b[i]) return +1;
      if (a[i] < b[i]) return -1;
    }
    return 0;
  }
  this.compare = compare;

//  add()
//  ---------------------------------------------------------------------------
/*  Add the augend and addend.
 */
  function add(augend, addend, trim)
  {
    var arrays = prepArgs(augend, addend);
    var aug = arrays.arg1;
    var add = arrays.arg2;
    var sum = '';
    var carry = 0;
    for (var i = 0; i < aug.length; i++)
    {
      var digit_sum = aug[i] + add[i] + carry;
      if (digit_sum > 9)
      {
        digit_sum -= 10;
        carry = 1;
      }
      else carry = 0;
      sum = String.fromCharCode(48 + digit_sum).concat(sum);
    }
    if (carry > 0) sum = '1'.concat(sum);
    if (trim)
    {
      while (sum.charAt(0) === '0') sum = sum.substr(1);
    }
    return sum;
  }
  this.add = add;

//  subtract()
//  ---------------------------------------------------------------------------
/*  Subtract the unsigned minuend from the unsigned subtrahend. The subtrahend
 *  must be numerically larger than the minuend. Returns a string the length
 *  of the subtrahend with leading zeros.
 *  Use the trim argument to trim the leading zeros.
 */
  function subtract(subtrahend, minuend, trim)
  {
    var arrays = prepArgs(subtrahend, minuend);
    var sub = arrays.arg1;
    var min = arrays.arg2;

    var diff = '';
    for (var i = 0; i < sub.length; i++)
    {
      var digit_diff = sub[i] - min[i];
      if (digit_diff < 0)
      {
        digit_diff += 10;
        for (var j = i+1; j<sub.length; j++)
        {
          sub[j] -= 1;
          if (sub[j] > -1) break;
          sub[j] = 9;
        }
      }
      diff = String.fromCharCode(48 + digit_diff).concat(diff);
    }
    if (trim) return ltrim(diff);
    return diff;
  };
  this.subtract = subtract;

//  multiply()
//  ---------------------------------------------------------------------------
/*  Multiplicand by multiplier; return the product.
 */
  function multiply(multiplicand, multiplier)
  {
    return multiplicand + 'x' + multiplier;
  };
  this.multiply = multiply;

//  divide()
//  ---------------------------------------------------------------------------
/*  Signed division of divisor by dividend, giving integer and fraction parts.
 *  The return object includes where the recurrence starts, if found.
 *    Algorithm (long division)
 *      Process optional sign characters of dividend and divisor.
 *      Check for division by zero.
 *      Calculate the integer part:
 *        If the divisor is larger than the dividend, the integer part is 0:
 *        the remainder is the dividend; the current position is zero; goto F.
 *        I: The remainder is the next n digits of the dividend, starting at the
 *        current position and continuing for the number of digits in the
 *        divisor. Count how many times you can sum the divisor without
 *        exceeding the remainder. Postpend that count to the integer part, and
 *        subtract the sum from the remainder to get the new remainder.
 *        Increment the current position. If there are enough digits left in the
 *        dividend, goto I.
 *      Calculate the fraction part:
 *        F: Count how many times you can sum the divisor without exceeding the
 *        dividend value in the next n digits of the dividend. Postpend that
 *        count to the fraction part, and subtract the sum from the remainder to
 *        get the new remainder.  If the remainder is zero, stop. If the
 *        remainder is on the remainder stack, note that position as the
 *        recurrence start, and stop. Otherwise, increment the current position and
 *        append the next digit of the dividend to the remainder, or zero if
 *        there is none.  If the fraction is shorter than PRECISION, goto F.
 *      Return a decimal_value object with the sign, integer part, fraction
 *      part, and recurrence start position.
 */
  function divide(arg1, arg2)
  {
    var integer_part      =  '';
    var fraction_part     =  '';
    var remainder         =  '';
    var remainders        = [ ];
    var dividend_index    =   0;
    var digit_value       =   0;
    var recurrence_start  =  -1;
    var dividend_sign     = '+';
    var divisor_sign      = '+';
    var dividend          = arg1;
    var divisor           = arg2;

    //  Process signs of dividend and divisor
    if (dividend[0] === '-' || dividend[0] === '+')
    {
      dividend_sign = dividend[0];
      dividend = dividend.substr(1);
    }
    if (divisor[0] === '-' || divisor[0] === '+')
    {
      divisor_sign = divisor[0];
      divisor = divisor.substr(1);
    }

    //  Divide by zero?
    if (compare(divisor, '0') === 0) return new decimal_value(Infinity, '', -1);

    //  Result less than 1?
    if (compare(dividend, divisor) < 0)
    {
      //  yes; divisor is larger than dividend
      integer_part = '0';
      remainder = dividend;
    }
    else
    {
      //  Integer Part
      remainder = dividend.substr(0, divisor.length);
      while ((dividend_index + divisor.length) <= dividend.length)
      {
        digit_value = 0;
        while (compare(remainder, divisor) >= 0)
        {
          digit_value++;
          remainder = subtract(remainder, divisor, true);
        }
        integer_part = integer_part.concat(String.fromCharCode(48 + digit_value));
        if (dividend_index + divisor.length < dividend.length)
        {
          remainder = ltrim(remainder.concat(dividend[dividend_index + divisor.length]));
        }
        dividend_index++;
      }
    }
    integer_part = ltrim(integer_part);

    //  Fraction Part
    remainders[0] = remainder;
    while (fraction_part.length < PRECISION)
    {
      if (dividend_index + divisor.length < dividend.length)
      {
        remainder = remainder.concat(dividend[dividend_index + divisor.length]);
      }
      else
      {
        remainder = remainder.concat('0');
      }
      digit_value = 0;
      while (compare(remainder, divisor) >= 0)
      {
        digit_value++;
        remainder = subtract(remainder, divisor, true);
      }
      fraction_part = fraction_part.concat(String.fromCharCode(48 + digit_value));
      remainder = ltrim(remainder);
      if (remainder === '0') break;
      for (var i = 0; i < remainders.length; i++)
      {
        if (remainders[i] === remainder)
        {
          recurrence_start = i;
          break;
        }
      }
      if (recurrence_start > -1) break;
      remainders.push(remainder);
      dividend_index++;
    }

    return new decimal_value( integer_part,
                              fraction_part,
                              divisor_sign !== dividend_sign,
                              recurrence_start, 0);
  };
  this.divide = divide;
}
@
